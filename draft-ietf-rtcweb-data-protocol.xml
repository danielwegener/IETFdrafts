<?xml version='1.0'?>
<?rfc symrefs='yes'?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'>
<?rfc toc='yes' ?>
<?rfc compact='yes' ?>
<?rfc subcompact='no' ?>
<?rfc sortrefs='no' ?>
<?rfc strict='yes' ?>

<rfc category='std'
     ipr='trust200902'
     docName='draft-ietf-rtcweb-data-protocol-01.txt'>
<front>
<title>RTCWeb Data Channel Protocol</title>

<author initials='R.' surname='Jesup' fullname='Randell Jesup'>
  <organization>Mozilla</organization>
  <address>
    <postal>
      <street></street>
      <code></code>
      <city></city>
      <country>US</country>
    </postal>
    <email>randell-ietf@jesup.org</email>
  </address>
</author>

<author initials='S.' surname='Loreto' fullname='Salvatore Loreto'>
  <organization>Ericsson</organization>
  <address>
    <postal>
      <street>Hirsalantie 11</street>
      <code>02420</code>
      <city>Jorvas</city>
      <country>FI</country>
    </postal>
    <email>salvatore.loreto@ericsson.com</email>
  </address>
</author>

<author initials='M.' surname='Tuexen' fullname='Michael Tuexen'>
  <organization abbrev='Muenster Univ. of Appl. Sciences'>
                Muenster University of Applied Sciences</organization>
  <address>
    <postal>
      <street>Stegerwaldstrasse 39</street>
      <code>48565</code>
      <city> Steinfurt</city>
      <country>DE</country>
    </postal>
    <email>tuexen@fh-muenster.de</email>
  </address>
</author>

<date />
<area>RAI</area>
<workgroup>RTCWeb Working Group</workgroup>

<abstract>
<t>The Web Real-Time Communication (WebRTC) working group is charged to
provide protocols to support for direct interactive rich communication
using audio, video, and data between two peers' web-browsers.
This document specifies a simple protocol for establishing symmetric
data channels between the peers. It uses a two way handshake and allows
sending of user data without waiting for the handhshake to complete.</t>
</abstract>
</front>

<middle>
<section title='Introduction'>
<t>The DataChannel Protocol is designed to provide, in the WebRTC data channel
context <xref target='I-D.ietf-rtcweb-data-channel'/>, a simple in-band method
to open symmetric data channels.
As discussed in <xref target='I-D.ietf-rtcweb-data-channel'/> the protocol uses
the Stream Control Transmission Protocol (SCTP) <xref target='RFC4960'/> 
encapsulated in the Datagram Transport Layer Security (DTLS)
<xref target='RFC6347'/> as described in
 <xref target='I-D.ietf-tsvwg-sctp-dtls-encaps'/> to benefit
from their already standardized transport and security features.</t>
</section>

<section title='Conventions'>
<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
interpreted as described in <xref target='RFC2119'/>.</t>
</section>

<section title='Terminology'>
<t>This document uses the following terms:
<list style='hanging'>
<t hangText='Association:'>
An SCTP association.</t>
<t hangText='Stream:'>
A unidirectional stream of an SCTP association. It is uniquely identified
by a stream identifier (0-65534).  Note: stream identifier 65535 is
reserved due to SCTP Init messages allowing a maximum of 65535 streams to
be negotiated (0-65534).</t>
<t hangText='Channel:'>
Two Streams with the same identifier, one in each direction, which are managed
together.</t>
</list></t>
</section>

<section title='Protocol Overview'>
<t>This protocol is a simple, low-overhead way to establish bidirectional
Channels over an SCTP association with a consistent set of properties.</t>
<t>The set of consistent properties </t>
<t>Channels are created by sending an optional DATA_CHANNEL_OPEN message on
an unused Stream. There is no handshake, and the channel is available to
send on as soon as the DATA_CHANNEL_OPEN has been sent. Alternatively,
both sides make externally agree to a set of parameters for a Channel, in
which case no DATA_CHANNEL_OPEN message is required.</t>

<t>To avoid glare in opening Channels, each side must use either even or
odd Streams when sending a DATA_CHANNEL_OPEN message. The method used to
determine which side uses odd or even is based on the underlying DTLS
connection role when used in RTCWeb, with the side acting as the DTLS
client using even stream identifiers.</t>

<t>Note: There is no attempt to resolve label glare; if both sides open a
Channel labeled "x" at the same time, there will be two Channels labeled "x" -
one on an even Stream pair, one on an odd pair.</t>

<t>The protocol field is to ease cross-application interoperation
("federation") by identifying the data being passed with an IANA-registered
string, and may be useful for homogenous applications which may create
more than one type of Channel.</t>
</section>


<section title='Message Formats'
         anchor='msg_format'>
<t>Every data channel protocol message starts with a one byte field called
"Message Type" which indicates the type of the message. The corresponding
values are managed by IANA (see <xref target='iana_msg_type'/>).</t>

<section title='DATA_CHANNEL_OPEN Message'
         anchor='open_msg_format'>
<t>This message is sent initially on the stream used for user messages
using the channel. All DATA_CHANNEL_OPEN messages MUST be sent using SCTP
options for reliable in-order delivery.</t>

<figure align='center'>
<artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Message Type |  Channel Type |            Priority           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                    Reliability Parameter                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         Label Length          |       Protocol Length         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
\                                                               /
|                             Label                             |
/                                                               \
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
\                                                               /
|                            Protocol                           |
/                                                               \
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
</figure>

<t><list style='hanging'>

<t hangText='Message Type: 1 byte (unsigned integer)'>
<vspace blankLines='0'/>
This field holds the IANA defined message type for the the DATA_CHANNEL_OPEN
message. The suggested value of this field for IANA is 0x03.</t>

<t hangText='Channel Type: 1 byte (unsigned integer)'>
<vspace blankLines='0'/>
This field specifies the type of the channel to be opened and the
values are managed by IANA (see <xref target='iana_channel_type'/>):
<list style='hanging'>
<t hangText='DATA_CHANNEL_RELIABLE (0x00):'>
The channel provides a reliable in-order bi-directional communication
channel.</t>
<t hangText='DATA_CHANNEL_RELIABLE_UNORDERED (0x80):'>
The channel provides a reliable unordered bi-directional communication
channel.</t>
<t hangText='DATA_CHANNEL_PARTIAL_RELIABLE_REXMIT (0x01):'>
The channel provides a partially-reliable in-order bi-directional
Communication channel. User messages will not be retransmitted more times
than specified in the Reliability Parameter.</t>
<t hangText='DATA_CHANNEL_PARTIAL_RELIABLE_REXMIT_UNORDERED (0x81):'>
The channel provides a partial reliable unordered bi-directional
Communication channel. User messages will not be retransmitted more times
than specified in the Reliability Parameter.</t>
<t hangText='DATA_CHANNEL_PARTIAL_RELIABLE_TIMED (0x02):'>
The channel provides a partial reliable in-order bi-directional
Communication channel. User messages might not be transmitted or
retransmitted after a specified life-time given in milli-seconds in the
Reliability Parameter. This life-time starts when providing the user
message to the Javascript engine.</t>
<t hangText='DATA_CHANNEL_PARTIAL_RELIABLE_TIMED_UNORDERED (0x82):'>
The channel provides a partial reliable unordered bi-directional
Communication channel. User messages might not be transmitted or
retransmitted after a specified life-time given in milli-seconds in the
Reliability Parameter. This life-time starts when providing the user
message to the Javascript engine.</t>
</list>
</t>

<t hangText='Priority: 2 bytes (integer)'>
<vspace blankLines='0'/>
The priority of the channel.</t>

<t hangText='Reliability Parameter: 4 bytes (unsigned integer)'>
<vspace blankLines='0'/>
This field is ignored if a reliable channel is used.
<vspace blankLines='0'/>
If a partial reliable channel with limited number of retransmissions is
used, this field specifies the number of retransmissions. If a partial
reliable channel with limited lifetime is used, this field specifies
the maximum lifetime in milliseconds.</t>

<t hangText='Label Length: 2 bytes (unsigned integer)'>
<vspace blankLines='0'/>
The length of the label field in bytes.</t>

<t hangText='Protocol Length: 2 bytes (unsigned integer)'>
<vspace blankLines='0'/>
The length of the protocol field in bytes.</t>

<t hangText='Label: Variable Length (sequence of characters)'>
<vspace blankLines='0'/>
The name of the channel. This may be an empty string.</t>

<t hangText='Protocol: Variable Length (sequence of characters)'>
<vspace blankLines='0'/>
The protocol for the channel. This may be an empty string. If used, it
is an IANA-registered protocol (see <xref target='iana_protocol'/>).</t>
</list>
</t>
</section>

<section title='DATA_CHANNEL_ACK Message'>
<t>This message is sent in response to an DATA_CHANNEL_OPEN_RESPONSE
message on the stream used for user messages using the channel.
Reception of this message tells the opener that the channel setup
handshake is complete.</t>
<figure align='center'>
<artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Message Type |
+-+-+-+-+-+-+-+-+
</artwork>
</figure>
<t><list style='hanging'>

<t hangText='Message Type: 1 byte (unsigned integer)'>
<vspace blankLines='0'/>
This field holds the IANA defined message type for the the DATA_CHANNEL_ACK
message. The suggested value of this field for IANA is 0x02.</t>
</list>
</t>
</section>

</section>

<section title='Procedures'>
<!--
<section title='Adding a Channel (in-band open)'>
<t>When one side wants to add a channel using in-band declaration, it picks
an unused outgoing Stream (even stream identifier for DTLS clients, or odd
for DTLS servers); if no unused streams are available a negotiation to
increase the number is done via <xref target='RFC6525'/>, or failure is
returned. It should also check that the other side has the same channel
available, and if not then initiate an increase in the number of streams.
It then sends a DATA_CHANNEL_OPEN control message on the outgoing
stream.</t>

<t>When an DATA_CHANNEL_OPEN is received on an incoming Stream, the Stream
is associated with a newly-created Channel (unless the Stream was already
part of an externally-negotiated Channel). If any data had arrived on the
Stream before the Open arrives and had been buffered, it is now delivered on
the new Channel.</t>

<t>The channel_type and reliability_parameters fields of the
DATA_CHANNEL_OPEN message MUST be used to set up the reverse side of the
Channel so that both directions use the same options by default.</t>
</section>

<section title='Adding a Channel (external negotiation)'>
<t>When one side wants to add a channel using external negotiation, it
picks a Stream. This can be done by asking the protocol to select an
unused Stream (of the approriate even or odd type), or by simply telling
the protocol what Stream to use. In the latter case, the application is
responsible for avoiding collisions with existing Streams. If it attempts
to re-use a Stream which is part of an existing Channel, the addition
should fail.</t>

<t>In addition to choosing a Stream, the application should also inform the
protocol of the options to use for sending messages. Note that there is no
requirement for both sides to have the same options for an
externally-negotiated stream, though typically this will be the case.</t>

<t>The application must now ensure in an application-specific manner that
the other side will also inform the protocol that the selected Stream is to
be used, and the parameters for sending data from that side.</t>
</section>

<section title='Closing a Channel'>
<t>Channels MUST be closed by and SCTP reset of the outgoing Stream. If an
incoming Stream is reset by the peer, a corresponding outgoing stream
reset SHOULD be issued. If the streams in both directions of a Channel are
reset, the Channel is considered fully closed and the Streams are available
for reuse for new channel opens.</t>
</section>

<section title='Sending and Receiving Data'>
<t>Data shall be sent using PPID's other than the Data Channel Control
PPID. These PPID's should be registered with IANA via (TBD). The meaning
of these data PPIDs and the format of the data shall be specific to the
usage of this protocol, and typically shall be provided to the higher
layers to allow proper decoding of the data.</t>

<t>It is RECOMMENDED that higher layers wishing to transfer large messages
fragment them using PPIDs or other mechanisms to avoid monopolization of
the SCTP association by the transfer of a single large message, unless a
future SCTP draft relaxes this concern. If fragmented solely with PPID
values, then transmission MUST occur on a reliable in-order channel. If
in-band application framing is used, then other options may be possible.</t>

<t>For WebRTC, data PPID's for DOMStrings and binary data (and
fragmentation thereof) shall be created.</t>

<t>All data sent on a Channel in both directions MUST be sent over the
underlying Stream using the reliability defined when the Channel was
opened unless the options are changed, or per-message options are specified
by a higher level.</t>

<t>Data may be sent immediately after sending or receiving a
DATA_CHANNEL_OPEN message, or after creating an externally-negotiated
Channel.</t>

<t>It is recommended that message size be kept within certain size bounds
(TBD) as applications will not be able to support arbitrarily-large single
messages.</t>
</section>
-->
</section>


<section title='Security Considerations'
         anchor='sec-security'>
<t>This document does not add any additional considerations to the ones given in
<xref target='I-D.ietf-rtcweb-security'/> and
<xref target='I-D.ietf-rtcweb-security-arch'/>.</t>
</section>


<section title='IANA Considerations'
         anchor='sec-IANA'>
<t>[NOTE to RFC-Editor:
<list>
<t>"RFCXXXX" is to be replaced by the RFC number you assign this document.</t>
</list>
]</t>
<t>IANA is asked to update the reference of an already existing SCTP PPID
assignment and to create three new registries for the data channel protocol.</t>

<section title='SCTP Payload Protocol Identifier'>
<t>This document uses one already registered SCTP Payload Protocol
Identifier (PPID). <xref target='RFC4960'/> creates the registry
"SCTP Payload Protocol Identifiers" from which this identifier was assigned.
IANA is requested to update the reference of this assignment to point to this
document.
Therefore this assignment should be updated to read:</t>
<texttable>
<ttcol align='left'>Value</ttcol>
<ttcol align='left'>SCTP PPID</ttcol>
<ttcol align='left'>Reference</ttcol>
<c>WebRTC Control</c> <c>50</c> <c>[RFCXXXX]</c>
</texttable>
</section>

<section title='New Message Type Registry'
         anchor ='iana_msg_type'>
<t>IANA is requested to create a new registration table "Message Type Registry"
for the data channel protocol to manage the one byte "Message Type" field in
data channel messages (see <xref target='msg_format'/>).</t>
<t>The assignment of new message types is done through an RFC required action,
as defined in <xref target='RFC5226'/>.
Documentation of the new message type MUST contain the following information:
<list style="numbers">
<t>A name for the new message type;</t>
<t>A detailed procedural description of the use of messages with the new type
within the operation of the data channel protocol.</t>
</list></t>
<t>Initially the following values need to be registered:</t>
<texttable>
<ttcol align='left'>Name</ttcol>
<ttcol align='left'>Type</ttcol>
<ttcol align='left'>Reference</ttcol>
<c>Reserved</c>          <c>0x00     </c> <c>[RFCXXXX]</c>
<c>Reserved</c>          <c>0x01     </c> <c>[RFCXXXX]</c>
<c>DATA_CHANNEL_ACK</c>  <c>0x02     </c> <c>[RFCXXXX]</c>
<c>DATA_CHANNEL_OPEN</c> <c>0x03     </c> <c>[RFCXXXX]</c>
<c>Unassigned</c>        <c>0x04-0xfe</c> <c>         </c>
<c>Reserved</c>          <c>0xff     </c> <c>[RFCXXXX]</c>
</texttable>
</section>

<section title='New Channel Type Registry'
         anchor='iana_channel_type'>
<t>IANA is requested to create a new registration table "Channel Type Registry"
for the data channel protocol to manage the one byte "Channel Type" field in
DATA_CHANNEL_OPEN messages (see <xref target='open_msg_format'/>).</t>
<t>The assignment of new message types is done through an RFC required action,
as defined in <xref target='RFC5226'/>.
Documentation of the new channel type MUST contain the following information:
<list style="numbers">
<t>A name for the new channel type;</t>
<t>A detailed procedural description of the user message handling for
data channels using this new channel type.</t>
</list>
Please note that if new channel types support ordered and unordered message
delivery, the high order bit SHOULD be used to indicated whether the message
delivery is unordered or not.</t>
<t>Initially the following values need to be registered:</t>
<texttable>
<ttcol align='left'>Name</ttcol>
<ttcol align='left'>Type</ttcol>
<ttcol align='left'>Reference</ttcol>
<c>DATA_CHANNEL_RELIABLE</c>                          <c>0x00</c> <c>[RFCXXXX]</c>
<c>DATA_CHANNEL_RELIABLE_UNORDERED</c>                <c>0x80</c> <c>[RFCXXXX]</c>
<c>DATA_CHANNEL_PARTIAL_RELIABLE_REXMIT</c>           <c>0x01</c> <c>[RFCXXXX]</c>
<c>DATA_CHANNEL_PARTIAL_RELIABLE_REXMIT_UNORDERED</c> <c>0x81</c> <c>[RFCXXXX]</c>
<c>DATA_CHANNEL_PARTIAL_RELIABLE_TIMED</c>            <c>0x02</c> <c>[RFCXXXX]</c>
<c>DATA_CHANNEL_PARTIAL_RELIABLE_TIMED_UNORDERED</c>  <c>0x82</c> <c>[RFCXXXX]</c>
<c>Reserved</c>                                       <c>0x7f</c> <c>[RFCXXXX]</c>
<c>Reserved</c>                                       <c>0xff</c> <c>[RFCXXXX]</c>
<c>Unassigned</c>                                     <c>rest</c> <c>         </c>
</texttable>
</section>

<section title='New Protocol Registry'
         anchor='iana_protocol'>
<t>IANA is requested to create a new registration table "Protocol Registry"
for the data channel protocol to manage the "Protocol" field of type string in
DATA_CHANNEL_OPEN messages (see <xref target='open_msg_format'/>).</t>
<t>The assignment of new message types is done through an First Come First
Served action, as defined in <xref target='RFC5226'/>.
Documentation of the new protocol MUST contain the following information:
<list style="numbers">
<t>A name for the protocol;</t>
<t>A reference for the protocol indicated by the registered string.</t>
</list></t>
<t>Initially this registry is empty.</t>
</section>

</section>


<section title='Acknowledgments'>
<t>The authors wish to thank Martin Thompson, Cullen Jennings, Harald
Alvestrand, Peter Thatcher, Adam Bergkvist, Justin Uberti, Randall Stewart,
Stefan Håkansson and many others for their invaluable comments.</t>
</section>
</middle>


<back>
<references title='Normative References'>
<?rfc include='reference.RFC.2119'?>
<?rfc include='reference.RFC.3758'?>
<?rfc include='reference.RFC.4960'?>
<?rfc include='reference.RFC.5226'?>
<?rfc include='reference.RFC.6347'?>
<?rfc include='reference.RFC.6525'?>
<?rfc include='reference.I-D.ietf-tsvwg-sctp-dtls-encaps'?>
</references>

<references title='Informational References'>
<?rfc include='reference.I-D.ietf-rtcweb-data-channel' ?>
<?rfc include='reference.I-D.ietf-rtcweb-security'?>
<?rfc include='reference.I-D.ietf-rtcweb-security-arch'?>
</references>
</back>

</rfc>
