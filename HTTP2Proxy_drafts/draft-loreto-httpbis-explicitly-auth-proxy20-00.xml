<?xml version="1.0" encoding="us-ascii"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
  <!ENTITY RFC3709 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3709.xml">
  <!ENTITY RFC5280 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5280.xml">
  <!ENTITY RFC6455 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6455.xml">
  <!ENTITY I-D.ietf-httpbis-p1-messaging SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-httpbis-p1-messaging-26.xml">
  <!ENTITY I-D.ietf-httpbis-http2 SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-httpbis-http2-12.xml">
  <!ENTITY I-D.nottingham-http-proxy-problem SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-nottingham-http-proxy-problem-00.xml">
  <!ENTITY I-D.vidya-httpbis-explicit-proxy-ps SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-vidya-httpbis-explicit-proxy-ps-00.xml">
  <!ENTITY I-D.rpeon-httpbis-exproxy SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-rpeon-httpbis-exproxy-00.xml">
  <!ENTITY I-D.ietf-tls-applayerprotoneg SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-tls-applayerprotoneg-05.xml">
  <!ENTITY I-D.ietf-appsawg-http-forwarded SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-appsawg-http-forwarded-10.xml">
 
  ]>

<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>

<?rfc strict="no"?>
<?rfc toc="yes"?>
<?rfc tocdepth="3"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc ipr="trust200902"
     docName="draft-loreto-httpbis-explicitly-auth-proxy-00" category='std'>
<front>

  <title abbrev="Explicitly Authenticated Proxy">
	Explicitly Authenticated Proxy in HTTP/2.0
  </title>

  <author initials="S." surname="Loreto" fullname="Salvatore Loreto" role="editor">
    <organization>Ericsson</organization>
    <address>
        <postal>
        <street>Hirsalantie 11</street>
        <code>02420</code>
          <city>Jorvas</city>
          <country>Finland</country>
        </postal>
        <email>salvatore.loreto@ericsson.com</email>
    </address>
  </author>

  <author initials="J." surname="Mattsson" fullname="John Mattsson">
    <organization>Ericsson</organization>
    <address>
        <postal>
        <street></street>
        <code></code>
          <city>Kista</city>
          <country>Sweden</country>
        </postal>
        <email>john.mattsson@ericsson.com</email>
    </address>
  </author>

  <author initials="R." surname="Skog" fullname="Robert Skog">
    <organization>Ericsson</organization>
    <address>
        <postal>
        <street></street>
        <code></code>
          <city>Kista</city>
          <country>Sweden</country>
        </postal>
        <email>robert.skog@ericsson.com</email>
    </address>
  </author>

  <author initials="H." surname="Spaak" fullname="Hans Spaak">
    <organization>Ericsson</organization>
    <address>
        <postal>
        <street></street>
        <code></code>
          <city>Kista</city>
          <country>Sweden</country>
        </postal>
        <email>hans.spaak@ericsson.com</email>
    </address>
  </author>


  <author initials="G." surname="Bourg" fullname="Gus Bourg">
    <organization>AT&amp;T</organization>
    <address>
        <postal>
          <street></street>
          <city></city>
          <code></code>
          <country></country>
        </postal>
        <phone></phone>
        <email>gb3635@att.com</email>
    </address>
  </author>

  <author initials="D." surname="Druta" fullname="Dan Druta">
    <organization>AT&amp;T</organization>
    <address>
        <postal>
          <street></street>
          <city></city>
          <code></code>
          <country></country>
        </postal>
        <phone></phone>
        <email>dd5826@att.com</email>
    </address>
  </author>

  <author initials="M." surname="Hafeez" fullname="Mohammad Hafeez">
    <organization>AT&amp;T</organization>
    <address>
        <postal>
          <street></street>
          <city></city>
          <code></code>
          <country></country>
        </postal>
        <phone></phone>
        <email>mh2897@att.com</email>
    </address>
  </author>

  <date year="2014" />
  <area>app</area>
  <keyword>HTTP2</keyword>
  <keyword>Proxy</keyword>
  <keyword>Certificate</keyword>

  <abstract>
    <t>This document proposes the definition of an Explicitly Authenticated Proxy as intermediary of normally unprotected "http://" URI scheme requests and responses of HTTP2 traffic.</t>
    <t>An Explicitly Authenticated Proxy is a message forwarding agent that is selected, with explicit user's consent, and configured by the user agent to receive exclusively "http" URI scheme requests
    and attempt to satisfy those requests on behalf of the user agent. A client is connected to an Explicitly Authenticated Proxy through an authenticated TLS secured connection.</t>
    <t>This document describes a method for a user agent to automatically discover and authenticate, and for an user to provide consent for an Explicitly Authenticated Proxy. This enables proxied    communication to be encrypted and authenticated, explicitly acknowledged by the user agent and visible to the server end point.</t>
  </abstract>
</front>



<middle>

<section title="Introduction">

   <t>HTTP/1.1 and earlier allowed for the use of proxies and gateways to satisfy requests through a chain of connections.
This has made possible a Web ecosystem of various kinds of proxies and gateways:
cache servers, security gateways, web accelerators, content filters, and many others. In some cases their presence is explicit (configured proxies), and in other they are completely transparent to the end user (interception proxies, and gateways such as reverse proxies).</t>

   <t>The success and the presence of the proxies and gateways is also a problem for the evolution of the HTTP as their behaviour on protocol
extensions, and especially on alternative wire formats of the protocol, is not predictable. This unpredictable behaviour can lead to difficulties to deploy new versions of the protocol before the intermediaries are themselves updated. As an example, see the difficulties in deploying the WebSocket Protocol <xref target="RFC6455"/> in clear. It can also lead to potentially problematic trust models where proxies are accessing traffic content without the user being aware. Relying on establishing an HTTPS tunnel has then become the popular way to bypass the intermediate proxies
as it provides reliable deployment model for web protocols. The encrypted tunnel obfuscates the data from all intermediaries and provides integrity validation.</t>

   <t>HTTPS tunnels, while speeding up the deployment, make it difficult for a forward proxy and other gateways to be used to enable caching, enhance anonymity for a user agent,
or enhance security by scanning content for virus and malware.
HTTPS tunnels also remove the possibility to enhance delivery performance based on the knowledge of the network status, and this become an important limitation especially
with HTTP2 when multiple streams are multiplexed on top of the same TCP connection.</t>


    <t>Several drafts analysing the role and the requirements for proxy have been submitted:
    <list style='numbers'>
<t><xref target="I-D.nottingham-http-proxy-problem"/> discusses the use and configuration of proxies in HTTP, pointing out problems in the currently deployed Web infrastructure
   along the way</t>
<t><xref target="I-D.vidya-httpbis-explicit-proxy-ps"/> describes the issues with HTTP proxies for TLS protected traffic and motivates the need for explicit proxying
   capability in HTTP. It also presents the goals that such a solution would need to satisfy and some example solution directions.</t>
<t> <xref target="I-D.rpeon-httpbis-exproxy"/> describes a method for connecting to a proxy via a secure channel, allowing, disallowing, and detecting any transforms 
   that the proxy may perform, and allowing the proxy to connect via secure channel to another site on the user's behalf.</t>
</list></t>

<t>Use cases in form of stories for proxies are also listed in the wiki <eref target="https://github.com/http2/http2-spec/wiki/Proxy-User-Stories">Proxy-User-Stories</eref>
and analysed in a matrix form in <eref target="https://github.com/bizzbyster/TrustedProxy/wiki/Trusted-Proxy-Use-Case-Analysis-and-Alternatives">Trusted Proxy Use Case Analysis and Alternatives</eref>.</t>

<t>This draft explicitly narrows down the general discussion to the role of Proxy as intermediary of "http" scheme URIs of HTTP2 traffic.</t>


<section title="Explicitly Authenticated Proxy">

   <t>An "Explicitly Authenticated", as defined in this document, is an HTTP Proxy (see section 2.3 <xref target="I-D.ietf-httpbis-p1-messaging"/>) that is certificate authenticated, user
acknowledged and connected to over a TLS encrypted (and possibly integrity protected) connection. An Explicitly Authenticated Proxy is configured by the user agent to exclusively receive "http" URI scheme requests and attempt to
satisfy those requests on behalf of the user agent.</t>

   <t>The presence of a configured Explicitly Authenticated Proxy MUST NOT change the user agent behaviour for the "https" URI scheme requests. To distinguish between an HTTP2 connection meant to transport "https" URIs resources and an HTTP2 connection meant to transport "http" URIs resource, this document defines the ALPN <xref target="I-D.ietf-tls-applayerprotoneg"/> identifier "h2c" to signal that HTTP2 transports "http://" URI requests and resources over TLS.</t> 

   <t>This document describes a method for an user agent to automatically discover and then for an user to accept or reject (i.e. to provide consent for) an Explicitly Authenticated Proxy to be securely involved when a request to an "http" URI resource is made.</t>

   <t><xref target="TLSProxyAnnounc"/> defines a solution based on sending a proxy certificate in the TLS handshake.</t>

   <t><xref target="ExplicitProxy"/> describes the role of the Explicitly Authenticated Proxy in helping the user to fetch "http" URIs resource when the user has provided consent to the Explicitly Authenticated Proxy to be involved.</t>

</section>

</section>

<section title="Terminology" anchor="terminology">  
  <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
  "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
  document are to be interpreted as described in <xref target="RFC2119"/>.</t>

    <t>This document defines the following terms:
      <list style="hanging">
          <t hangText="Explicit proxy: "> an intercepting proxy that communicates its presence to the user agent and destination server.</t>
          <t hangText="Explicitly Authenticated Proxy:"> a message forwarding agent that is certificate authenticated, user acknowledged and connected to over a TLS encrypted connection. 
           A Explicitly Authenticated Proxy is configured by the user agent to exclusively receive "http" URI scheme request and attempt to satisfy those request on behalf of the user agent.</t>
      </list>
    </t>

</section>

<section  title="Establishing proxy connection">


<t>An Explicitly Authenticated Proxy indicates its presence, identity and willingness to serve the user agent by intercepting TLS ClientHello message containing "h2c" value (a new ALPN protocol type assigned for this purpose) in the ALPN <xref target="I-D.ietf-tls-applayerprotoneg"/> negotiation extension field. It answers the TLS initiation with a TLS ServerHello message containing the Proxy certificate.</t>

  <section  anchor="TLSProxyAnnounc" title="Proxy certificate">

<t>To help HTTP user agents identify and distinguish Explicitly Authenticated proxies from other servers (e.g. web servers), Explicitly Authenticated proxies should have a certification authority issued public key certificate.</t>

<t>More specifically, the certification authority SHOULD use the Extended Key Usage extension as specified in <xref target="RFC5280"/> to indicate a key purpose "proxyAuthentication" (a new object identifier needs to be assigned by IANA for this key purpose). The certification authority also marks this Extended Key Usage extension as critical. As the user needs to have high trust in the Proxy, it is desirable that the validation procedure for issuing proxy certificates be more rigorous than for issuing ordinary SSL certificates.</t>

<t>A proxy certificate MUST contain the SubjectAltName extension as defined in <xref target="RFC5280"/>. A name identifying the legal entity that is operating the proxy should be given in this extension.</t>

<t>To help end users understand the reason why the proxy is offered (in other words, the benefits of having the proxy in the path), a new X.509 certificate extension ProxyFunctions is introduced to list the functions the proxy is performing. More specifically, the ProxyFunction extension consists of a sequence of ProxyFunctionId which are object identifiers. The user agent should check the presence of this extension in the proxy certificate and present the proxy functions in a human readable format.</t>

<t>The user agent will provide the user with an opportunity to graphically view the results of a successful proxy certificate-based identification process leveraging on the usage of logotypes in public key certificates and attribute certificates as specified in <xref target="RFC3709"/>.</t>

</section>

<section  anchor="CertHandshake" title="TLS Handshake with Proxy certificate">

<t>When a (TLS and HTTP) user agent receives a Server Certificate message, it checks whether the certificate contains an Extended Key Usage extension and if so whether the "proxyAuthentication" key purpose id is included. If it is included, the user agent concludes that the certificate belongs to a proxy. The user agent then SHOULD ensure user consent.</t> 

<t>The user selection can be cached by the user agent. A consent SHOULD however be limited to the specific network access (such as APN or SSID) and may be limited to a single connection to that access or limited in time. How the consent information is stored is implementation specific, but as a network may have several proxies (for network resilience) it is RECOMMENDED that the consent is only tied to the Subject field of the proxy certificate so that
the consent applies to all proxy certificates with the same name.</t>


<t>If the user provides consent, the user agent continues the TLS handshake with the proxy.</t>


<figure anchor="fig.TLShandshakeProxyCertificate" title="TLS Handshake with Proxy certificate">
<artwork><![CDATA[
+--------------+                +------------+              +-------------+
|  User agent  |                |   Proxy    |              |   Server    |
+--------------+                +------------+              +-------------+
        |                             |                            |
        |                             |                            |
        | (1) ClientHello             |                            |
        |---------------------------->|                            |
        | ALPN Protocol Name: h2c     |                            |
        |                             |                            |
        |                             |                            |
        | (2) ServerHello, ServerCert |                            |
        |<----------------------------|                            |
        |  (Proxy cert)               |                            |
        |                             |                            |
        |                             |                            |
(3) User consent                      |                            |
        |                             |                            |
        | (4) Rest of TLS handshake   |                            |
        |<--------------------------->|                            |
        |                             |                            |
        | (5) HTTP2 over TLS          | (5) HTTP2 over TLS         |
        |<--------------------------->|<-------------------------->|
        |                             |                            |
        |                             |                            |

]]></artwork>
</figure>
</section>

<section  anchor="CertOptOut" title="Opt Out"> 
<t>If the user does not give consent, or decides to opt out from the proxy for a specific connection, the user agent will negotiate HTTP2 connection using "h2" value in the ALPN extension field. The proxy will then treat the connection as an "https" connection and will forward the ClientHello message to the Server, establishing an end-to-end TLS connection between the user agent and the destination server.</t>

<figure anchor="fig.TLShandshakeoptout" title="Opt Out">
<artwork><![CDATA[
+--------------+              +------------+                 +-------------+
|  User agent  |              |   Proxy    |                 |   Server    |
+--------------+              +------------+                 +-------------+
        |                                                           |
        |  (1) ClientHello                                          |
        |---------------------------------------------------------->|
        | (ALPN ProtocolName: h2)                                   |
        |                                                           |
        |  (2) ServerHello, ServerCert                              |
        |<----------------------------------------------------------|
        |  (3) Rest of TLS handshake                                |
        |<--------------------------------------------------------->|
        |                                                           |
        |  (4) HTTP2  over TLS                                      |
        |<--------------------------------------------------------->|
        |                                                           |

]]></artwork>
</figure>

</section>

<section anchor="PriorKnowledge" title="Connection with prior knowledge ">
<t>The HTTP2 user agent can discover the presence of a HTTP2 proxy for http:// resources before it starts the creation of the TLS connection. 
As an example, for a mobile handset, the discovery might occur at the network attachment.</t>

<t>Then the user agent validates the proxy certificate as per section <xref target="TLSProxyAnnounc"/> and requests "http://" resources as per <xref target="ExplicitProxy"/>.</t>

</section>

</section>



<section anchor="ExplicitProxy" title="Explicit Proxy behaviour">


<t>This section describes the role of the Explicitly Authenticated Proxy in helping the user to fetch http URI resources when the user has provided consent to the Explicitly Authenticated Proxy to be involved.</t>


<section anchor="B2B" title="Explicitly Authenticated Forward Proxy towards HTTP2 origin server">


<figure anchor="fig.4" title="Requesting an HTTP resource">
<artwork><![CDATA[
+--------------+              +--------------+              +--------------+
|  User agent  |              |    Proxy     |              |    Server    |
+--------------+              +--------------+              +--------------+
        |                            |                              |
    (TLS Proxy certificate )         |                              |
    (mechanism has taken place)      |                              |
        |                            |                              |
        |    (1) ClientHello         |                              |
        |--------------------------->|                              |
        |    (2)  ServerHello        |                              |
        |<---------------------------|                              |
        |    (3) ChangeCipherSpec    |                              |
        |--------------------------->|                              |
        |    (4) ChangeCipherSpec    |                              |
        |<---------------------------|                              |
        |                            |                              |
        |                            |                              |
        |/========= HTTP2 ==========\|                              |
        |                            |                              |
        |--(5)-stream(X)---GET------>|                              |
        |                            |    (6) TLS ClientHello       |
        |                            |----------------------------->|
        |                            |    (7) TLS ServerHello       |
        |                            |<-----------------------------|
        |                            |    (8) ChangeCipherSpec      |
        |                            |----------------------------->|
        |                            |    (9) ChangeCipherSpec      |
        |                            |<-----------------------------|   
        |                            |                              |
        |                            |/========= HTTP2 ============\|
        |                            |--(10)--stream(Z)---GET------>|
        |                            |                              | 
        |                            |                              |
        |                            |<-(11)--stream(Z)---200 OK----|
        |<-(12)--stream(X)---200 OK--|                              |
        |                            |                              |
        |\======== HTTP2 ===========/|\========== HTTP2 ===========/|
        |                            |                              |

]]></artwork>
</figure>
<t>
<list style='hanging'>
<t hangText='(0)'> The TLS Proxy Announcement (<xref target="TLSProxyAnnounc"/>)  mechanism has already taken place, so the user agent is now configured in the proxy mode.</t>
<t hangText='(1)...(4)'>For each "http" URI resource towards a not yet contacted Server Origin, the user agent negotiates a new TLS session, using the ALPN extension containing the "h2c" tag, to establish an HTTP2 connection.</t>
<t hangText='(5)'>The user agent will then use the streams in the HTTP2 connection to request any resources hosted on that Origin Server.</t>
<t hangText='(6)...(9)'>In the case the Proxy receives a request for a resource towards a not yet contacted Server Origin, the Explicitly Authenticated Proxy negotiates a new TLS session, using the ALPN extension containing the "h2c" ALPN identifier, to establish an HTTP2 connection.</t>
<t hangText='(10)'>Once the Proxy has established the HTTP2 connection toward the origin, it picks one stream to forward the request</t>
<t hangText='(11), (12)'>The Proxy forwards the answer it receives from the Origin Server to the user agent.</t>
</list>
</t>
</section>

<section anchor="B2B1" title="Explicitly Authenticated Forward Proxy towards HTTP/1.1 Origin Server">

<t>In the case the "http" URI resources requested by the user agent will be only available over HTTP/1.1 or the proxy does not
   have a previous knowledge about it, the proxy will then attempt to contact the resource based on its knowledge.</t>

<figure anchor="fig.2" title="Origin server with only HTTP/1.1 support">
<artwork><![CDATA[

+--------------+              +--------------+              +--------------+
|  User agent  |              |    Proxy     |              |    Server    |
+--------------+              +--------------+              +--------------+
        |                            |                              |
    (TLS Proxy announcement )        |                              |
    (mechanism has taken place)      |                              |
        |                            |                              |
        |    (1) TLS ClientHello     |                              |
        |--------------------------->|                              |
        |    (2)  ServerHello        |                              |
        |<---------------------------|                              |
        |    (3) ChangeCipherSpec    |                              |
        |--------------------------->|                              |
        |    (4) ChangeCipherSpec    |                              |
        |<---------------------------|                              |
        |                            |                              |
        |/--------------------------\|                              |
        |--(5)-stream(X)---GET------>|                              |
        |                            |                              |
        |          HTTP2             |--(6)------GET /1.1---------->|
        |                            |                              |
        |                            |<-(7)-------200 OK------------|
        |<-(8)--stream(X)---200 OK---|                              |
        |                            |                              |
        |\--------------------------/|                              |
        |                            |                              |


]]></artwork>
</figure>
</section>

<section anchor="B2B2" title="Explicitly Authenticated Forward Proxy and https URIs">

<t>A user agent MUST NOT use "h2c" as ALPN extension field in request for https resources.</t>

<t>The Proxy that intercepts the TLS ClientHello analyses the ALPN extension field and if it does not contain the "h2c" value
it does not do anything and lets the TLS handshake continue and the TLS session be established between the user agent and the Server 
(see <xref target="fig.10"/>).</t>

<figure anchor="fig.10" title="Explicitly Authenticated Proxy and https URI resources">
<artwork><![CDATA[
+--------------+              +------------+                 +-------------+
|  User agent  |              |   Proxy    |                 |   Server    |
+--------------+              +------------+                 +-------------+
        |                            |                               |
        |                            |                               |
        |  (1) TLS ClientHello                                       |
        |----------------------------------------------------------->|
        | (ALPN ProtocolName: h2)                                    |
        |                                    (2)  ServerHello        |
        |<-----------------------------------------------------------|
        |  (3) ChangeCipherSpec                                      |
        |----------------------------------------------------------->|
        |                                    (4) ChangeCipherSpec    |
        |<-----------------------------------------------------------|
        |                                                            |
        |---(5)-stream(X)---GET------------------------------------->|
        |                                                            |
        |<-------------------------(6)--stream(X)---200 OK-----------|

]]></artwork>
</figure>


</section>
</section>



<section title="Signalling the presence of a Proxy in between">
<t>The presence of Explicitly Authenticated Proxy in between an user agent and the origin server must be signalled to the origin server using an already defined HTTP header.</t>
<t>The Explicitly Authenticated proxy MUST add, or update when already present, the Forwarded HTTP header field <xref target="I-D.ietf-appsawg-http-forwarded"/> "for" parameter.</t>

</section>

<section title="Security Considerations">
<t>This document addresses Explicitly Authenticated proxies that act as intermediary for HTTP2 traffic and therefore the security and privacy implications of having those proxies in the path need to be considered. <eref target="Jarmoc, J., SSL/TLS Interception Proxies and Transitive Trust, 2012 https://www.grc.com/miscfiles/HTTPS_Interception_Proxies.pdf">MITM</eref>, <xref target="I-D.nottingham-http-proxy-problem"/> and <xref target="I-D.vidya-httpbis-explicit-proxy-ps"/> discuss various security and privacy issues associated with the use of proxies.</t>


<t>It should however be noticed that the presence of the Explicitly Authenticated proxy as discussed in this document does not in any way affect "https" URI resources. Those resources are protected end-to-end between user agent and origin server as usual. Only for "http" URI resources the achievable security level of hop-by-hop protection may be different than end-to-end protection, because it is now also dependent on the security features/capabilities of the proxy as to what cipher suites it supports, which root CA certificates it trusts, how it checks certificate revocation status, etc.  Users should also be made aware that the proxy has visibility to the actual content they exchange with Web servers, including personal and sensitive information.</t>

<t>The TLS connection from the user agent to the Explicitly Authenticated proxy is always authenticated. In case the origin server only offers unauthenticated TLS (e.g. by using a self-signed certificate) the explicit Explicitly Authenticated proxy increases the security in the access network (e.g. an unencrypted hotspot) by ensuring that there is no unwanted MITMs in this part of the network.</t>  

<t>To ensure the trustfulness of proxies, certification authorities validation procedure for issuing proxy certificates should be more rigorous than for issuing normal certificates and may also include technical details and processes relevant for the security assurance. The owner of the proxy could for example be obliged to apply security patches in a timely fashion.</t>

<t>When negotiating ciphersuite with the server, the Explicitly Authenticated proxy SHALL offer the ciphersuite negotiated between the user-agent and the proxy. Ciphersuites with a higher security level that the ciphersuite negotiated between the user-agent and proxy MAY be given a higher preference than the ciphersuite negotiated between the user-agent and proxy. Ciphersuites with a lower security level that the ciphersuite negotiated between the user-agent and proxy SHALL NOT be given a higher preference than the ciphersuite negotiated between the user-agent and proxy. While AES-256 is no weaker (an most probably much stronger) than AES-128, the relative security between different algorithm e.g SHA-256 vs Keccak-256 is not that clear. With security level we mean the complexity of the best known attack on that ciphersuite. The Explicitly Authenticated proxy SHOULD therefore be up to date with the best current practices regarding TLS.</t>

<t>This document proposes an approach to making the presence of proxy explicit to users and letting them decide whether they accept that.  A user can opt out and choose to bypass the proxy.
This ensures that a proxy never acts as intermediary for HTTP2 traffic unless authorised by the user.</t>

<t>When the user has given consent to the presence of the proxy, the user agent switches to a Proxy mode in which it does not check the hostname of the origin server against the server's identity as presented in the Server Certificate message. However if any of the following checks fails the user agent should immediately exit this Proxy mode:   
    <list style='numbers'>
<t>the server's certificate is issued by a trusted CA and the certificate is valid;</t>
<t>the Extended Key Usage extension is present in the certificate and indicates the owner of this certificate is a proxy;</t>
<t>the server possesses the private key corresponding to the certificate.</t>
</list></t>




</section>



<section title="Acknowledgments">
<t>The authors wish to thank Yi Cheng, Goran Eriksson, Stefan Hakansson, Nicolas Mailhot, Martin Nilsson, Emile Stephan (Connection with prior knowledge) and Salman Taj for their ideas, technical suggestions and comments.</t>
</section>



</middle>

<back>

    <references title="Normative References">
        &RFC2119;
        &RFC3709;
        &RFC5280;
	&I-D.ietf-httpbis-http2;
        &I-D.ietf-httpbis-p1-messaging;
        &I-D.nottingham-http-proxy-problem;
        &I-D.vidya-httpbis-explicit-proxy-ps;
        &I-D.rpeon-httpbis-exproxy;
        &I-D.ietf-tls-applayerprotoneg;
        &I-D.ietf-appsawg-http-forwarded;
    </references>

    <references title="Informative References">
        &RFC6455;        
    </references>


</back>

</rfc>
